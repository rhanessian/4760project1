A child that terminates, but has not been waited for becomes a
       "zombie".  The kernel maintains a minimal set of information
       about the zombie process (PID, termination status, resource usage
       information) in order to allow the parent to later perform a wait
       to obtain information about the child.  As long as a zombie is
       not removed from the system via a wait, it will consume a slot in
       the kernel process table, and if this table fills, it will not be
       possible to create further processes.  If a parent process
       terminates, then its "zombie" children (if any) are adopted by
       init(1), (or by the nearest "subreaper" process as defined
       through the use of the prctl(2) PR_SET_CHILD_SUBREAPER
       operation); init(1) automatically performs a wait to remove the
       zombies.
POSIX.1-2001 specifies that if the disposition of SIGCHLD is set
       to SIG_IGN or the SA_NOCLDWAIT flag is set for SIGCHLD (see
       sigaction(2)), then children that terminate do not become zombies
       and a call to wait() or waitpid() will block until all children
       have terminated, and then fail with errno set to ECHILD.  (The
       original POSIX standard left the behavior of setting SIGCHLD to
       SIG_IGN unspecified.  Note that even though the default
       disposition of SIGCHLD is "ignore", explicitly setting the
       disposition to SIG_IGN results in different treatment of zombie
       process children.)
Linux 2.6 conforms to the POSIX requirements.  However, Linux 2.4
       (and earlier) does not: if a wait() or waitpid() call is made
       while SIGCHLD is being ignored, the call behaves just as though
       SIGCHLD were not being ignored, that is, the call blocks until
       the next child terminates and then returns the process ID and
       status of that child.
 Linux notes
       In the Linux kernel, a kernel-scheduled thread is not a distinct
       construct from a process.  Instead, a thread is simply a process
       that is created using the Linux-unique clone(2) system call;
       other routines such as the portable pthread_create(3) call are
       implemented using clone(2).  Before Linux 2.4, a thread was just
       a special case of a process, and as a consequence one thread
       could not wait on the children of another thread, even when the
       latter belongs to the same thread group.  However, POSIX
       prescribes such functionality, and since Linux 2.4 a thread can,
       and by default will, wait on children of other threads in the
       same thread group.

       The following Linux-specific options are for use with children
       created using clone(2); they can also, since Linux 4.7, be used
       with waitid():

       __WCLONE
              Wait for "clone" children only.  If omitted, then wait for
              "non-clone" children only.  (A "clone" child is one which
              delivers no signal, or a signal other than SIGCHLD to its
              parent upon termination.)  This option is ignored if
              __WALL is also specified.
